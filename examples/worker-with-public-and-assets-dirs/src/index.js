import { readdir, readFile } from "node:fs/promises";

async function buildDirTree(dirPath, name) {
	const files = await readdir(dirPath, { withFileTypes: true });

	const content = await Promise.all(
		files.map(async (file) => {
			const childPath = `${dirPath}/${file.name}`;
			if (file.isFile()) {
				const fileContent = await readFile(childPath);
				return {
					path: childPath,
					name: file.name,
					content: fileContent,
				};
			}
			return await buildDirTree(childPath, file.name);
		})
	);

	return {
		path: dirPath,
		name: name ?? dirPath,
		content,
	};
}

export default {
	async fetch() {
		const trees = await Promise.all(
			["/public", "/assets"].map((dirPath) => buildDirTree(dirPath))
		);

		const displayTree = ({ name, content }) => {
			if (typeof content === "string") {
				return `<details>
					<summary> ─ ${name}</summary>

					<pre style="color: gray; padding-inline-start: 3rem;" test-id="content-of-${name}-file">${content}</pre>
				</details>`;
			}

			return `<div> ├─ <span>${name}</span><ul style="list-style: none; padding-inline-start: 0;">${content
				.map(
					({ name, content }) => `
							<li style="margin: 1rem;">
								${displayTree({ name, content })}
							</li>
						`
				)
				.join("\n")}</ul></div>`;
		};

		return new Response(
			`
				<!DOCTYPE html>
				<html lang="en">
				<head>
					<meta charset="UTF-8">
					<meta name="viewport" content="width=device-width, initial-scale=1.0">
					<title>Worker With Public and Assets Directories</title>
				</head>
				<body>
					<h1>Worker with <code>public</code> and <code>assets</code> directories</h1>
					<p>
						This is HTML server side generated by the worker and what follows is a result
						of combining <code>readdir</code> and <code>readFile</code> from <code>node:fs/promises</code> to
						generate (at runtime) tree structures showing all the files in the two directories
						<code>public</code> and <code>assets</code>.
					</p>
					${trees
						.map(
							(tree) => `
								<div style="padding: 1rem;" test-id="tree-for-${tree.path}">
									<div style="border: 1px solid gray; padding: 1rem;">
										${displayTree(tree)}
									</div>
								</div>
							`
						)
						.join("\n")}
				</body>
				</html>
			`,
			{
				headers: { "Content-Type": "text/html" },
			}
		);
	},
};
